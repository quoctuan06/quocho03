/*module.exports.config = {
	name: "log",
	eventType: ["log:unsubscribe","log:subscribe","log:thread-name"],
	version: "1.0.0",
	credits: "Mirai Team",
	description: "Ghi l·∫°i th√¥ng b√°o c√°c ho·∫°t ƒë√¥ng c·ªßa bot!",
    envConfig: {
        enable: true
    }
};

module.exports.run = async function({ api, event, Threads, args, Users }) {
	
	 var datathread = await api.getThreadInfo(event.threadID);
     var namethread = datathread.name;
	 const time = process.uptime() + global.config.UPTIME,
		hours = Math.floor(time / (60 * 60)),
		minutes = Math.floor((time % (60 * 60)) / 60),
		seconds = Math.floor(time % 60);
  var z_1 = (hours < 10) ? '0' + hours : hours;
    var x_1 = (minutes < 10) ? '0' + minutes : minutes;
    var y_1 = (seconds < 10) ? '0' + seconds : seconds;
    const moment = require("moment-timezone");
    var gio = moment.tz("Asia/Ho_Chi_Minh").format("HH:mm:ss D/MM/YYYY");
	
    const logger = require("../../utils/log");
    if (!global.configModule[this.config.name].enable) return;
    var formReport =  "[‚öúÔ∏è]=== „Äé ùêÅùêéùêì ùêçùêéùêìùêàùêÖùêàùêÇùêÄùêìùêàùêéùêç „Äè ===[‚öúÔ∏è]\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" +
	                "\n\n[‚öúÔ∏è]‚ûú ùêìùêûÃÇùêß ùêÅùê®ùê±: " + `${namethread}` +
                        "\n[‚öúÔ∏è]‚ûú ùêàùêù ùêÅùê®ùê±: " + event.threadID +
                        "\n[‚öúÔ∏è]‚ûú ùêáùêöÃÄùêßùê° ƒëùê®Ã£ÃÇùêßùê†: {task}" +
                        "\n[‚öúÔ∏è]‚ûú ùêìùêûÃÇùêß: " + (await Users.getData(event.author)).name +
                        "\n[‚öúÔ∏è]‚ûú ùêàùêù ùêúùêÆÃâùêö ùêßùê†ùêÆÃõùê®ÃõÃÄùê¢ ùêùùêÆÃÄùêßùê†: " + event.author  +
                        "\n[‚öúÔ∏è]‚ûú ùêáùê¢ùêûÃ£ÃÇùêß ùê≠ùêöÃ£ùê¢ ùêÅùêéùêì ùêúùêÆÃâùêö ùêâùêëùêì ùê°ùê®ùêöÃ£ùê≠ ƒëùê®Ã£ÃÇùêßùê† ƒëùêÆÃõùê®ÃõÃ£ùêú ùê•ùêöÃÄ: " + hours + " ùëîùëñùëúÃõÃÄ " + minutes + " ùëù‚Ñéùë¢ÃÅùë° " + seconds + " ùëîùëñùëéÃÇùë¶ " +
			"\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
			`[‚öúÔ∏è]‚ûú ùêìùê¢ùê¶ùêû: ${gio}`,
						
	   task = "";
	
    switch (event.logMessageType) {
        case "log:thread-name": {
            const oldName = (await Threads.getData(event.threadID)).name || "T√™n kh√¥ng t·ªìn t·∫°i",
                    newName = event.logMessageData.name || "T√™n kh√¥ng t·ªìn t·∫°i";
            task = "Ng∆∞·ªùi d√πng thay ƒë·ªïi t√™n nh√≥m t·ª´: '" + oldName + "' th√†nh '" + newName + "'";
            await Threads.setData(event.threadID, {name: newName});
            break;
        }
        case "log:subscribe": {
            if (event.logMessageData.addedParticipants.some(i => i.userFbId == api.getCurrentUserID())) task = "Bot ƒë√£ v√†o m·ªôt nh√≥m m·ªõi!";
            break;
        }
        case "log:unsubscribe": {
            if (event.logMessageData.leftParticipantFbId== api.getCurrentUserID()) task = "Bot ƒë√£ b·ªã kick ra kh·ªèi nh√≥m!"
            break;
        }
        default: 
            break;
    }

    if (task.length == 0) return;

    formReport = formReport
    .replace(/\{task}/g, task);

    return api.sendMessage(formReport, global.config.ADMINBOT[0], (error, info) => {
        if (error) return logger(formReport, "Logging Event");
    });
      }*/
module.exports.config = {
  name: "log",
  eventType: ["log:unsubscribe", "log:subscribe", "log:thread-name"],
  version: "1.0.0",
  credits: "Tpk",//*ƒë∆∞·ª£c s·ª± ch·ªâ d·∫´n nhi·ªát t√¨nh c·ªßa dc-nam
  description: "Ghi l·∫°i th√¥ng b√°o c√°c ho·∫°t ƒë√¥ng c·ªßa bot!",
  envConfig: {
    enable: true
  }
};

module.exports.run = async function ({ api, event, Users, Threads, Currencies }) {
  const threadSetting = (await Threads.getData(String(event.threadID))).data || 
    {};
    const threadInfo = await api.getThreadInfo(event.threadID)
    var threadName = threadInfo.threadName||"T√™n kh√¥ng t·ªìn t·∫°i";
  const logger = require("../../utils/log");
  if (!global.configModule[this.config.name].enable) return;
  let botID = api.getCurrentUserID();
   let threadMem = threadInfo.participantIDs.length;
  /*var allThreadID = global.data.allThreadID;
  for (const singleThread of allThreadID) {
    const thread = global.data.threadData.get(singleThread) || {};
    if (typeof thread["log"] != "undefined" && thread["log"] == false) return;
  }*/
  
  const moment = require("moment-timezone");
  const time = moment.tz("Asia/Ho_Chi_Minh").format("D/MM/YYYY HH:mm:ss");
  let sex = threadInfo.approvalMode;
  var pd = sex == false ? 'T·∫Øt' : sex == true ? 'B·∫≠t' : '\n';
  let qtv = threadInfo.adminIDs.length;
  let icon = threadInfo.emoji;
  //let nameThread = (await Threads.getData(event.threadID)).threadInfo.threadName || "T√™n kh√¥ng t·ªìn t·∫°i";
  //let nameThread = global.data.threadInfo.get(event.threadID).threadName || "T√™n kh√¥ng t·ªìn t·∫°i"; 

  //let threadInfo = await api.getThreadInfo(event.threadID);
  //nameThread =threadInfo.threadName;
  const nameUser = global.data.userName.get(event.author) || await Users.getNameUser(event.author);

  //console.log(nameThread)
 
  var formReport = "====„Äå ùóïùó¢ùóß ùóßùóõùó¢ÃÇùó°ùóö ùóïùóîÃÅùó¢ „Äç ====\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" +
    //"\n\n[üë®‚Äçüë©‚Äçüëß‚Äçüëß] ùóïùóºùòÖ: " + nameThread +
    `\n[üß∏] ‚ûú ùóßùó≤ÃÇùóª ùóªùóµùóºÃÅùó∫: ${threadName} ` +
    "\n[üî∞] ‚ûú ùóúùóó ùóªùóµùóºÃÅùó∫: " + event.threadID +
    `\n[üíì] ‚ûú ùóßùóºÃÇÃâùóªùó¥ ùòÄùóºÃÇÃÅ ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª: ${threadMem}` +
    `\n[üß©] ‚ûú ùó£ùóµùó≤ÃÇ ùó±ùòÇùòÜùó≤ÃÇÃ£ùòÅ: ${pd}` +
    `\n[‚öúÔ∏è] ‚ûú ùó§ùòÇùóÆÃâùóª ùòÅùóøùó∂Ã£ ùòÉùó∂ùó≤ÃÇùóª: ${qtv}` +
    `\n[üòª] ‚ûú ùóïùó∂ùó≤ÃÇÃâùòÇ ùòÅùòÇÃõùóºÃõÃ£ùóªùó¥ ùó∞ùóÆÃâùó∫ ùòÖùòÇÃÅùó∞: ${icon ? icon : 'Kh√¥ng s·ª≠ d·ª•ng'}` +
    "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" +
    "\n[üíû] ‚ûú ùóõùóÆÃÄùóªùóµ ƒëùóºÃ£ÃÇùóªùó¥ : {task}" +
    "\n[üë§] ‚ûú ùóßùó≤ÃÇùóª ùóªùó¥ùòÇÃõùóºÃõÃÄùó∂ ùó±ùòÇÃÄùóªùó¥ : " + nameUser +
    "\n[üçÑ] ‚ûú ùó®ùòÄùó≤ùóø ùó∂ùó±: " + event.author +
    "\n[üåê] ‚ûú ùóπùó∂ùóªùó∏ ùóôùóÆùó∞ùó≤ùóØùóºùóºùó∏: https://www.facebook.com/profile.php?id=" + event.author +
    "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[‚è∞] ‚ûú ùóßùóµùóºÃõÃÄùó∂ ùó¥ùó∂ùóÆùóª: " + time + "",
    task = "";
  switch (event.logMessageType) {
    case "log:thread-name": {
        newName = event.logMessageData.name || "T√™n kh√¥ng t·ªìn t·∫°i";
        task = "Ng∆∞·ªùi d√πng thay ƒë·ªïi t√™n nh√≥m th√†nh " + newName + "";
        await Threads.setData(event.threadID, {name: newName});
        break;
    }
    case "log:subscribe": {
      if (event.logMessageData.addedParticipants.some(i => i.userFbId == botID)) task = "Ng∆∞·ªùi d√πng ƒë√£ th√™m bot v√†o m·ªôt nh√≥m m·ªõi!";
      break;
    }
    case "log:unsubscribe": {
      if (event.logMessageData.leftParticipantFbId == botID) {
        if(event.senderID == botID) return;
        const data = (await Threads.getData(event.threadID)).data || {};
        data.banned = true;
        var reason = "KiÃÅch bot t∆∞Ã£ do, kh√¥ng xin pheÃÅp";
        data.reason = reason || null;
        data.dateAdded = time;
        await Threads.setData(event.threadID, { data });
        global.data.threadBanned.set(event.threadID, { reason: data.reason, dateAdded: data.dateAdded });

        task = "Ng∆∞·ªùi d√πng ƒë√£ kick bot ra kh·ªèi nh√≥m!"
      }
      break;
    }
    default:
      break;
  }

  async function streamURL(url, mime='jpg') {
    const dest = `${__dirname}/cache/${Date.now()}.${mime}`,
    downloader = require('image-downloader'),
    fse = require('fs-extra');
    await downloader.image({
        url, dest
    });
    setTimeout(j=>fse.unlinkSync(j), 60*1000, dest);
    return fse.createReadStream(dest);
};
  if (task.length == 0) return;
  formReport = formReport
    .replace(/\{task}/g, task);

  return api.sendMessage({
body: formReport, attachment: [await streamURL(threadInfo.imageSrc), await streamURL(`https://graph.facebook.com/${event.author}/picture?height=720&width=720&access_token=1371688333316058|yqnZCV_SATCp9jPHNUQZaj5_C_Y`)]
}, global.config.ADMINBOT[0], (error, info) => {
    if (error) return logger(formReport, "[ Logging Event ]");
  });
}